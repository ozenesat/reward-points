{"version":3,"sources":["logo.svg","resources/transactions.js","components/RewardTable.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","transactions","date","amount","customer","id","name","RewardTable","useState","tableData","setTableData","useEffect","users","forEach","item","reward","pointCalculator","userId","points","Table","striped","bordered","hover","variant","className","Object","keys","map","reduce","accumulator","currentValue","App","src","logo","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wGAAAA,EAAOC,QAAU,IAA0B,kC,6KCA9BC,G,YAAe,CAAC,CACrBC,KAAM,MACNC,OAAQ,IACRC,SAAU,CACNC,GAAI,IACJC,KAAM,QAGd,CACIJ,KAAM,MACNC,OAAQ,IACRC,SAAU,CACNC,GAAI,IACJC,KAAM,QAGd,CACIJ,KAAM,MACNC,OAAQ,GACRC,SAAU,CACNC,GAAI,IACJC,KAAM,QAGd,CACIJ,KAAM,MACNC,OAAQ,GACRC,SAAU,CACNC,GAAI,IACJC,KAAM,SAGd,CACIJ,KAAM,MACNC,OAAQ,IACRC,SAAU,CACNC,GAAI,IACJC,KAAM,SAGd,CACIJ,KAAM,MACNC,OAAQ,GACRC,SAAU,CACNC,GAAI,IACJC,KAAM,SAGd,CACIJ,KAAM,MACNC,OAAQ,IACRC,SAAU,CACNC,GAAI,IACJC,KAAM,W,cCeHC,EAjEK,SAAC,GAAsB,IAApBN,EAAmB,EAAnBA,aAAmB,EACNO,mBAAS,IADH,mBACjCC,EADiC,KACtBC,EADsB,KAGxCC,qBAAU,WACR,IAAMC,EAAQ,GAiBd,OAhBAX,EAAaY,SAAQ,SAACC,GACpB,IAAMC,EAASC,EAAgBF,EAAKX,QAC9Bc,EAASH,EAAKV,SAASC,GACvBY,KAAUL,IACdA,EAAMK,GAAU,CACdb,SAAUU,EAAKV,SACfc,OAAQ,CACN,IAAO,EACP,IAAO,EACP,IAAO,KAIbN,EAAMK,GAAQC,OAAOJ,EAAKZ,OAASa,KAErCL,EAAaE,GACN,eAGN,IAEH,IAAMI,EAAkB,SAACb,GACvB,OAAIA,EAAS,IAA8B,GAAhBA,EAAS,KAAW,GAC3CA,EAAS,GAAYA,EAAS,GAC3B,GAGT,OACE,kBAACgB,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAACC,QAAQ,OAAOC,UAAU,OACrD,+BACE,4BACE,2CACA,6CACA,2CACA,2CACA,2CACA,+CAGJ,+BAEIC,OAAOC,KAAKjB,GAAWkB,KAAI,SAACV,GAAY,IAAD,EACTR,EAAUQ,GAA9Bb,EAD6B,EAC7BA,SAAUc,EADmB,EACnBA,OAClB,OACE,4BACE,4BAAKd,EAASC,IACd,4BAAKD,EAASE,MACbmB,OAAOC,KAAKR,GAAQS,KAAI,SAACzB,GAAD,OAAU,4BAAKgB,EAAOhB,OAC/C,4BACCuB,OAAOC,KAAKR,GAAQU,QAAO,SAACC,EAAaC,GAAd,OAA+BD,EAAcX,EAAOY,KAAe,WCpChGC,MAdf,WACE,OACE,yBAAKP,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKQ,IAAKC,IAAMT,UAAU,WAAWU,IAAI,SACzC,6EAGA,kBAAC,EAAD,CAAajC,aAAcA,OCHfkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.386073ae.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export const transactions = [{\n        date: \"Jan\",\n        amount: 100,\n        customer: {\n            id: 123,\n            name: \"Jim\"\n        }\n    },\n    {\n        date: \"Feb\",\n        amount: 120,\n        customer: {\n            id: 123,\n            name: \"Jim\"\n        }\n    },\n    {\n        date: \"Mar\",\n        amount: 40,\n        customer: {\n            id: 123,\n            name: \"Jim\"\n        }\n    },\n    {\n        date: \"Jan\",\n        amount: 20,\n        customer: {\n            id: 125,\n            name: \"Emma\"\n        }\n    },\n    {\n        date: \"Feb\",\n        amount: 750,\n        customer: {\n            id: 125,\n            name: \"Emma\"\n        }\n    },\n    {\n        date: \"Mar\",\n        amount: 50,\n        customer: {\n            id: 125,\n            name: \"Emma\"\n        }\n    },\n    {\n        date: \"Feb\",\n        amount: 100,\n        customer: {\n            id: 127,\n            name: \"Vera\"\n        }\n    }\n]","import React, { useEffect, useState } from 'react';\nimport Table from 'react-bootstrap/Table';\n\nconst RewardTable = ({ transactions }) => {\n  const [tableData, setTableData] = useState({})\n  \n  useEffect(() => {\n    const users = {}\n    transactions.forEach((item) => {\n      const reward = pointCalculator(item.amount)\n      const userId = item.customer.id\n      if (!(userId in users)) {\n        users[userId] = {\n          customer: item.customer,\n          points: {\n            \"Jan\": 0,\n            \"Feb\": 0,\n            \"Mar\": 0\n          }\n        }\n      }\n      users[userId].points[item.date] += reward\n    })\n    setTableData(users)\n    return () => {\n      \n    }\n  }, [])\n\n  const pointCalculator = (amount) => {\n    if (amount > 100) return  (amount - 100) * 2 + 50\n    if (amount > 50) return (amount - 50)\n    return 0\n  }\n\n  return (\n    <Table striped bordered hover variant=\"dark\" className=\"m-5\">\n      <thead>\n        <tr>\n          <th>Customer Id</th>\n          <th>Customer Name</th>\n          <th>Jan Rewards</th>\n          <th>Feb Rewards</th>\n          <th>Mar Rewards</th>\n          <th>Total Rewards</th>\n        </tr>\n      </thead>\n      <tbody>\n        {\n          Object.keys(tableData).map((userId) => {\n            const { customer, points} = tableData[userId]\n            return (\n              <tr>\n                <td>{customer.id}</td>\n                <td>{customer.name}</td>\n                {Object.keys(points).map((date) => <td>{points[date]}</td>)}\n                <td>\n                {Object.keys(points).reduce((accumulator, currentValue) => accumulator + points[currentValue], 0)}\n                </td>\n              </tr>\n            );\n          })\n        }\n      </tbody>\n    </Table>\n  );\n} \n\nexport default RewardTable","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { transactions } from './resources/transactions';\nimport RewardTable from './components/RewardTable'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n         Welcome to The React Reward Points Application\n        </p>\n        <RewardTable transactions={transactions} />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}